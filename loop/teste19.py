import csv
import time
import re
import os
from datetime import datetime

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, WebDriverException, TimeoutException, StaleElementReferenceException, ElementClickInterceptedException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Aumentar o tempo de espera impl√≠cita para dar mais tempo ao navegador,
# mas ainda permitindo waits expl√≠citos para elementos cr√≠ticos.
# Embora waits expl√≠citos sejam prefer√≠veis, um tempo impl√≠cito pode ajudar
# em situa√ß√µes onde elementos podem aparecer com um pequeno atraso.
# IMPORTANTE: Use com modera√ß√£o, pois pode adicionar atrasos se elementos n√£o existirem.
# driver.implicitly_wait(5) # Pode ser definido ap√≥s a inicializa√ß√£o do driver

def safe_get_element_text(element, css_selector):
    """
    Tenta obter o texto de um elemento usando um seletor CSS.
    Retorna "N/A" se o elemento n√£o for encontrado ou o texto for vazio.
    Inclui tratamento para StaleElementReferenceException.
    """
    try:
        # Tenta encontrar o elemento imediatamente
        found_element = element.find_element(By.CSS_SELECTOR, css_selector)
        text = found_element.text.strip()
        cleaned_text = text.replace('\xa0', ' ').strip()
        return cleaned_text if cleaned_text else "N/A"
    except NoSuchElementException:
        return "N/A"
    except StaleElementReferenceException:
        # Tenta re-encontrar o elemento se ele ficou "stale"
        try:
            # Reduzindo o tempo de espera para 0.5s para re-tentativa r√°pida
            re_found_element = WebDriverWait(element, 0.5).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, css_selector))
            )
            text = re_found_element.text.strip()
            cleaned_text = text.replace('\xa0', ' ').strip()
            return cleaned_text if cleaned_text else "N/A"
        except (NoSuchElementException, TimeoutException, StaleElementReferenceException):
            return "N/A"
        except Exception: # Captura qualquer outra exce√ß√£o e retorna N/A
            return "N/A"
    except Exception: # Captura qualquer outra exce√ß√£o e retorna N/A
        return "N/A"

def safe_get_element_attribute(element, css_selector, attribute):
    """
    Tenta obter um atributo de um elemento usando um seletor CSS.
    Retorna "N/A" se o elemento n√£o for encontrado ou o atributo n√£o existir.
    Inclui tratamento para StaleElementReferenceException.
    """
    try:
        # Tenta encontrar o elemento imediatamente
        found_element = element.find_element(By.CSS_SELECTOR, css_selector)
        attr_value = found_element.get_attribute(attribute)
        return attr_value.strip() if attr_value else "N/A"
    except NoSuchElementException:
        return "N/A"
    except StaleElementReferenceException:
        # Tenta re-encontrar o elemento se ele ficou "stale"
        try:
            # Reduzindo o tempo de espera para 0.5s para re-tentativa r√°pida
            re_found_element = WebDriverWait(element, 0.5).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, css_selector))
            )
            attr_value = re_found_element.get_attribute(attribute)
            return attr_value.strip() if attr_value else "N/A"
        except (NoSuchElementException, TimeoutException, StaleElementReferenceException):
            return "N/A"
        except Exception: # Captura qualquer outra exce√ß√£o e retorna N/A
            return "N/A"
    except Exception: # Captura qualquer outra exce√ß√£o e retorna N/A
        return "N/A"

def extract_lot_details(driver_instance, lot_data_list):
    """
    Navega para o link de cada lote na 'lot_data_list' e extrai informa√ß√µes detalhadas da p√°gina do lote.
    Atualiza os dicion√°rios existentes na 'lot_data_list' com os novos dados detalhados.
    Tamb√©m registra quais elementos foram encontrados ou falharam.
    """
    main_window_handle = driver_instance.current_window_handle
    
    def get_detail_by_label_internal(driver_obj, label_text, parent_selector=""):
        try:
            xpaths_to_try = [
                f"{parent_selector}//span[contains(@class, 'label-categoria') and normalize-space(text())='{label_text}']/following-sibling::p",
                f"{parent_selector}//span[contains(@class, 'label-categoria') and normalize-space(text())='{label_text}']/following-sibling::span",
                f"{parent_selector}//span[contains(@class, 'label-categoria') and normalize-space(text())='{label_text}']/following-sibling::a/*[self::span or self::p]",
                f"{parent_selector}//span[contains(@class, 'label-categoria') and normalize-space(text())='{label_text}']/following-sibling::a",
                f"{parent_selector}//div[contains(@class, 'col-4')]//span[normalize-space(text())='{label_text}']/parent::div/following-sibling::div//p",
                f"{parent_selector}//div[contains(@class, 'col-4')]//span[normalize-space(text())='{label_text}']/following-sibling::p"
            ]
            
            for xpath_attempt in xpaths_to_try:
                try:
                    element = driver_obj.find_element(By.XPATH, xpath_attempt)
                    text = element.text.strip().replace('\xa0', ' ')
                    if text:
                        return text, True
                except NoSuchElementException:
                    continue
            return "N/A", False
        except StaleElementReferenceException:
            # print(f" ¬†‚ùó StaleElementReferenceException ao buscar detalhe '{label_text}'. Ignorando.")
            return "N/A", False
        except Exception:
            # print(f" ¬†‚ùó Erro inesperado ao buscar detalhe '{label_text}': {e}")
            return "N/A", False
            
    def get_direct_detail_internal(driver_obj, css_selectors_list):
        for css_selector in css_selectors_list:
            try:
                element = driver_obj.find_element(By.CSS_SELECTOR, css_selector)
                text = element.text.strip().replace('\xa0', ' ')
                if text:
                    return text, True
            except NoSuchElementException:
                continue
            except StaleElementReferenceException:
                try:
                    # Reduzindo o tempo de espera para 0.5s para re-tentativa r√°pida
                    re_found_element = WebDriverWait(driver_obj, 0.5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, css_selector))
                    )
                    text = re_found_element.text.strip().replace('\xa0', ' ')
                    if text:
                        return text, True
                except (NoSuchElementException, TimeoutException, StaleElementReferenceException):
                    continue
                except Exception:
                    continue
            except Exception:
                continue
        return "N/A", False

    for index, item in enumerate(lot_data_list):
        link = item['Link']
        if link != "N/A" and link:
            print(f"\nüîÑ Processando detalhes para o lote {index + 1} (Link: {link})...")
            
            # Inicializa com N/A e False para cada campo
            details = {
                "Detalhe Ano Ve√≠culo": "N/A", "found_Ano_Veiculo": False,
                "Detalhe Combust√≠vel": "N/A", "found_Combustivel": False,
                "Detalhe KM Ve√≠culo": "N/A", "found_KM_Veiculo": False,
                "Detalhe Valor Mercado": "N/A", "found_Valor_Mercado": False,
                "Detalhe Cor": "N/A", "found_Cor": False,
                "Detalhe Possui Chave": "N/A", "found_Possui_Chave": False,
                "Detalhe Tipo Retomada": "N/A", "found_Tipo_Retomada": False,
                "Detalhe Localiza√ß√£o": "N/A", "found_Localizacao": False,
                "Detalhe Tipo Ve√≠culo": "N/A", "found_Tipo_Veiculo": False,
            }

            try:
                # Abrir link na mesma aba, se poss√≠vel, para evitar overhead de m√∫ltiplas abas
                # Ou usar driver.execute_script("window.location.href = arguments[0]", link)
                # O ideal aqui √© navegar diretamente, n√£o abrir nova aba, a menos que seja um requisito
                driver_instance.get(link) # Altera para navegar na mesma aba
                
                # Aguarda um elemento chave da p√°gina de detalhes
                detail_container = WebDriverWait(driver_instance, 15).until( # Reduzindo o tempo de espera
                    EC.presence_of_element_located((By.CSS_SELECTOR, "div.categorias-veiculo, div.q-card__section--vert.q-card__section.q-pa-md.text-detail-veiculo-container"))
                )
                # N√£o √© necess√°rio scrollIntoView se os elementos estiverem no DOM e voc√™ estiver buscando por eles
                # driver_instance.execute_script("arguments[0].scrollIntoView(true);", detail_container)
                # time.sleep(0.5) # Pausas m√≠nimas ou zero, dependendo da necessidade real de renderiza√ß√£o

                print(" ¬†-> Tentando extrair detalhes do bloco gt-sm (layout desktop)...")
                
                # Extra√ß√£o otimizada com atribui√ß√£o direta e verifica√ß√£o de found
                details["Detalhe Ano Ve√≠culo"], details["found_Ano_Veiculo"] = get_direct_detail_internal(driver_instance, [
                    "div.gt-sm div.row.q-pb-sm div.col-4:nth-child(1) p.text-categoria",
                    "div.gt-sm div.q-card__section--vert.q-card__section.q-pa-md div.row div.col-4:nth-child(1) p.text-categoria"
                ])
                if details["found_Ano_Veiculo"]:
                    match_ano = re.search(r'\d{4}', details["Detalhe Ano Ve√≠culo"])
                    if match_ano:
                        details["Detalhe Ano Ve√≠culo"] = match_ano.group(0)
                    elif "/" in details["Detalhe Ano Ve√≠culo"]:
                        details["Detalhe Ano Ve√≠culo"] = details["Detalhe Ano Ve√≠culo"].split('/')[0].strip()

                details["Detalhe Combust√≠vel"], details["found_Combustivel"] = get_direct_detail_internal(driver_instance, [
                    "div.gt-sm div.row.q-pb-sm div.col-4:nth-child(2) p.text-categoria",
                    "div.gt-sm div.q-card__section--vert.q-card__section.q-pa-md div.row div.col-4:nth-child(2) p.text-categoria"
                ])
                details["Detalhe KM Ve√≠culo"], details["found_KM_Veiculo"] = get_direct_detail_internal(driver_instance, [
                    "div.gt-sm div.row.q-pb-sm div.col-4:nth-child(3) p.text-categoria",
                    "div.gt-sm div.q-card__section--vert.q-card__section.q-pa-md div.row div.col-4:nth-child(3) p.text-categoria"
                ])

                details["Detalhe Valor Mercado"], details["found_Valor_Mercado"] = get_detail_by_label_internal(driver_instance, "Valor Mercado", parent_selector="//div[contains(@class, 'gt-sm')]")
                if details["found_Valor_Mercado"]:
                    details["Detalhe Valor Mercado"] = details["Detalhe Valor Mercado"].replace('R$', '').replace('.', '').replace(',', '.').strip()

                details["Detalhe Cor"], details["found_Cor"] = get_detail_by_label_internal(driver_instance, "Cor", parent_selector="//div[contains(@class, 'gt-sm')]")
                details["Detalhe Possui Chave"], details["found_Possui_Chave"] = get_detail_by_label_internal(driver_instance, "Possui Chave", parent_selector="//div[contains(@class, 'gt-sm')]")
                details["Detalhe Tipo Retomada"], details["found_Tipo_Retomada"] = get_detail_by_label_internal(driver_instance, "Tipo Retomada", parent_selector="//div[contains(@class, 'gt-sm')]")
                details["Detalhe Localiza√ß√£o"], details["found_Localizacao"] = get_detail_by_label_internal(driver_instance, "Localiza√ß√£o", parent_selector="//div[contains(@class, 'gt-sm')]")
                details["Detalhe Tipo Ve√≠culo"], details["found_Tipo_Veiculo"] = get_detail_by_label_internal(driver_instance, "Tipo", parent_selector="//div[contains(@class, 'gt-sm')]")

                # Fallback para layout mobile (lt-md) se os dados do desktop n√£o foram encontrados
                if not details["found_Ano_Veiculo"]:
                    temp_ano, found = get_direct_detail_internal(driver_instance, [
                        "div.lt-md div.row.q-pb-sm div.col-4:nth-child(1) p.text-categoria",
                        "div.lt-md div.q-card__section--vert.q-card__section.q-pa-md div.row div.col-4:nth-child(1) p.text-categoria"
                    ])
                    if found:
                        match_ano = re.search(r'\d{4}', temp_ano)
                        if match_ano:
                            details["Detalhe Ano Ve√≠culo"] = match_ano.group(0)
                        elif "/" in temp_ano:
                            details["Detalhe Ano Ve√≠culo"] = temp_ano.split('/')[0].strip()
                        else:
                            details["Detalhe Ano Ve√≠culo"] = temp_ano.strip()
                        details["found_Ano_Veiculo"] = True # Atualiza o status

                if not details["found_Combustivel"]:
                    temp_combustivel, found = get_direct_detail_internal(driver_instance, [
                        "div.lt-md div.row.q-pb-sm div.col-4:nth-child(2) p.text-categoria",
                        "div.lt-md div.q-card__section--vert.q-card__section.q-pa-md div.row div.col-4:nth-child(2) p.text-categoria"
                    ])
                    if found:
                        details["Detalhe Combustivel"] = temp_combustivel
                        details["found_Combustivel"] = True
                        
                if not details["found_KM_Veiculo"]:
                    temp_km, found = get_direct_detail_internal(driver_instance, [
                        "div.lt-md div.row.q-pb-sm div.col-4:nth-child(3) p.text-categoria",
                        "div.lt-md div.q-card__section--vert.q-card__section.q-pa-md div.row div.col-4:nth-child(3) p.text-categoria"
                    ])
                    if found:
                        details["Detalhe KM Ve√≠culo"] = temp_km
                        details["found_KM_Veiculo"] = True

                if not details["found_Valor_Mercado"]:
                    temp_valor_mercado, found = get_detail_by_label_internal(driver_instance, "Valor Mercado", parent_selector="//div[contains(@class, 'lt-md')]")
                    if found:
                        details["Detalhe Valor Mercado"] = temp_valor_mercado.replace('R$', '').replace('.', '').replace(',', '.').strip()
                        details["found_Valor_Mercado"] = True

                if not details["found_Cor"]:
                    temp_cor, found = get_detail_by_label_internal(driver_instance, "Cor", parent_selector="//div[contains(@class, 'lt-md')]")
                    if found:
                        details["Detalhe Cor"] = temp_cor
                        details["found_Cor"] = True

                if not details["found_Possui_Chave"]:
                    temp_chave, found = get_detail_by_label_internal(driver_instance, "Possui Chave", parent_selector="//div[contains(@class, 'lt-md')]")
                    if found:
                        details["Detalhe Possui Chave"] = temp_chave
                        details["found_Possui_Chave"] = True

                if not details["found_Tipo_Retomada"]:
                    temp_tipo_retomada, found = get_detail_by_label_internal(driver_instance, "Tipo Retomada", parent_selector="//div[contains(@class, 'lt-md')]")
                    if found:
                        details["Detalhe Tipo Retomada"] = temp_tipo_retomada
                        details["found_Tipo_Retomada"] = True

                if not details["found_Localizacao"]:
                    temp_localizacao, found = get_detail_by_label_internal(driver_instance, "Localiza√ß√£o", parent_selector="//div[contains(@class, 'lt-md')]")
                    if found:
                        details["Detalhe Localizacao"] = temp_localizacao
                        details["found_Localizacao"] = True

                if not details["found_Tipo_Veiculo"]:
                    temp_tipo_veiculo, found = get_detail_by_label_internal(driver_instance, "Tipo", parent_selector="//div[contains(@class, 'lt-md')]")
                    if found:
                        details["Detalhe Tipo Veiculo"] = temp_tipo_veiculo
                        details["found_Tipo_Veiculo"] = True
                
                print(f" ¬†‚úîÔ∏è Detalhes extra√≠dos para {link}.")
                print(" ¬†Status de extra√ß√£o dos campos de detalhe:")
                for field_name in [
                    "Ano Ve√≠culo", "Combust√≠vel", "KM Ve√≠culo", "Valor Mercado",
                    "Cor", "Possui Chave", "Tipo Retomada", "Localiza√ß√£o", "Tipo Ve√≠culo"
                ]:
                    status_icon = "‚úÖ" if details[f"found_{field_name.replace(' ', '_')}"] else "‚ùå"
                    print(f" ¬†¬†¬†{status_icon} {field_name}")


                lot_data_list[index].update({
                    "Detalhe Ano Ve√≠culo": details["Detalhe Ano Ve√≠culo"],
                    "Detalhe Combust√≠vel": details["Detalhe Combustivel"],
                    "Detalhe KM Ve√≠culo": details["Detalhe KM Veiculo"],
                    "Detalhe Valor Mercado": details["Detalhe Valor Mercado"],
                    "Detalhe Cor": details["Detalhe Cor"],
                    "Detalhe Possui Chave": details["Detalhe Possui Chave"],
                    "Detalhe Tipo Retomada": details["Detalhe Tipo Retomada"],
                    "Detalhe Localiza√ß√£o": details["Detalhe Localizacao"],
                    "Detalhe Tipo Ve√≠culo": details["Detalhe Tipo Veiculo"]
                })

            except TimeoutException:
                print(f" ¬†‚ö†Ô∏è Timeout ao carregar detalhes do lote em {link}. Informa√ß√µes adicionais podem estar incompletas ou a p√°gina n√£o carregou corretamente.")
            except Exception as e:
                print(f" ¬†‚ùå ERRO geral ao extrair detalhes da p√°gina {link}: {e}")
            
            finally:
                # N√£o √© necess√°rio fechar e reabrir abas se estiver navegando na mesma aba
                # Se houver m√∫ltiplas abas, voc√™ precisaria mudar de volta para a principal.
                # No entanto, ao usar driver.get(link), voc√™ substitui a p√°gina atual,
                # ent√£o n√£o h√° necessidade de gerenciamento de janela aqui.
                pass # N√£o faz nada no finally se estiver navegando na mesma aba.

# --- Configura√ß√£o e Inicializa√ß√£o do Selenium ---
print("[INFO] Iniciando a configura√ß√£o do Selenium...")
options = Options()
options.add_argument("--headless")   # Rodar em modo headless para mais velocidade e menor uso de recursos
options.add_argument("--disable-gpu")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--window-size=1920,1080")
options.add_argument("--start-maximized")
options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option("useAutomationExtension", False)

# Adicionando op√ß√µes para otimizar o desempenho do navegador
options.add_argument("--blink-settings=imagesEnabled=false") # Desabilita o carregamento de imagens
options.add_argument("--disable-extensions") # Desabilita extens√µes
options.add_argument("--dns-prefetch-disable") # Desabilita pr√©-busca DNS
options.add_argument("--disable-browser-side-navigation") # Pode acelerar a navega√ß√£o
options.add_argument("--disable-features=NetworkService") # Desabilita o servi√ßo de rede (cuidado com isso, pode quebrar sites complexos)
options.add_argument("--disable-background-networking") # Desabilita atividades de rede em segundo plano

# --- CONEX√ÉO COM O SELENIUM ---
# Voc√™ precisar√° ter um Selenium Grid ou Standalone Server rodando, por exemplo, via Docker.
# Exemplo de URL para um container Docker chamado 'selenium':
SELENIUM_URL = "http://selenium:4444/wd/hub" 
# Se voc√™ estiver executando o Selenium localmente sem Docker, pode ser "http://localhost:4444/wd/hub"

driver = None
MAX_TRIES = 10 

for attempt in range(MAX_TRIES):
    try:
        print(f"[INFO] Tentando conectar ao Selenium ({attempt+1}/{MAX_TRIES})...")
        driver = webdriver.Remote(command_executor=SELENIUM_URL, options=options)
        # Definir espera impl√≠cita aqui, ap√≥s o driver ser inicializado
        driver.implicitly_wait(1) # Tempo de espera impl√≠cita baixo
        print("[INFO] Conectado ao Selenium com sucesso!")
        break
    except WebDriverException as e:
        print(f"[WARN] Selenium ainda n√£o est√° pronto: {e}. Tentando novamente em 2 segundos...")
        time.sleep(2)
else:
    raise Exception("‚ùå N√£o foi poss√≠vel conectar ao Selenium ap√≥s v√°rias tentativas.")

dados = [] # Lista para armazenar os dados de todos os lotes

try:
    url = "https://leilo.com.br/leilao/carros?" # URL da p√°gina de leil√µes
    driver.get(url)
    print(f"[INFO] P√°gina carregada: {driver.title}")

    # --- L√≥gica para fechar pop-up de cookies ou outros banners (CR√çTICO) ---
    print("[INFO] Tentando fechar pop-ups/aceitar cookies (se houver)...")
    try:
        # Aumentar o tempo do WebDriverWait para o pop-up, pois ele pode demorar
        cookie_banner_container = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div.cc-nb-main-container"))
        )
        cookie_accept_button = WebDriverWait(cookie_banner_container, 5).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button.cc-nb-okcookie"))
        )
        
        driver.execute_script("arguments[0].click();", cookie_accept_button)
        print("[INFO] Pop-up de cookies/aceita√ß√£o clicado com sucesso.")
        time.sleep(0.5) # Pausa m√≠nima para o pop-up desaparecer
    except TimeoutException:
        print("[INFO] Nenhum pop-up de cookies/aceita√ß√£o identificado ou apareceu no tempo limite. Prosseguindo.")
    except NoSuchElementException:
        print("[INFO] Cont√™iner de cookies encontrado, mas o bot√£o de aceitar n√£o. Prosseguindo.")
    except Exception as e:
        print(f"[WARN] Erro inesperado ao tentar lidar com pop-ups: {e}. Prosseguindo.")

    # --- Vari√°veis de controle de pagina√ß√£o ---
    total_paginas = 1
    current_page = 1

    # --- Loop principal para iterar por todas as p√°ginas de listagem ---
    while current_page <= total_paginas:
        print(f"\n--- Processando P√°gina {current_page} de {total_paginas} ---")

        try:
            # Espera pelos elementos dos lotes (cards) estarem presentes na p√°gina
            WebDriverWait(driver, 20).until( # Reduzindo o tempo de espera aqui
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".sessao.cursor-pointer"))
            )
            # time.sleep(0.5) # Pequena pausa para garantir que todos os elementos renderizem - Tente remover se poss√≠vel
        except TimeoutException:
            print(f"[WARN] Timeout ao carregar lotes na P√°gina {current_page}. Pode n√£o haver lotes nesta p√°gina ou carregamento lento. Fim da extra√ß√£o de lista.")
            break

        lotes = driver.find_elements(By.CSS_SELECTOR, ".sessao.cursor-pointer")
        print(f"[INFO] {len(lotes)} lotes encontrados na P√°gina {current_page}.")

        if not lotes: # Se n√£o encontrar lotes na p√°gina, encerra o loop de pagina√ß√£o
            print(f"[INFO] Nenhum lote encontrado na P√°gina {current_page}. Fim da extra√ß√£o de lista.")
            break

        # --- Extra√ß√£o de dados b√°sicos dos lotes da p√°gina atual ---
        for i, lote in enumerate(lotes, start=1):
            try:
                # Re-localiza o elemento do lote para evitar StaleElementReferenceException
                # Aumentar o tempo aqui para ter certeza que o elemento est√° vis√≠vel antes de interagir
                lote_element_on_page = WebDriverWait(driver, 10).until(EC.visibility_of(lotes[i-1])) 
                
                print(f"üîç Extraindo dados b√°sicos do Lote {i} na P√°gina {current_page}:")

                titulo = safe_get_element_text(lote_element_on_page, "div.header-card h3")
                link = safe_get_element_attribute(lote_element_on_page, "a.img-card", "href")
                if link == "N/A": # Tenta um seletor alternativo para o link se o primeiro falhar
                    link = safe_get_element_attribute(lote_element_on_page, "div.header-card a", "href")
                if link and not link.startswith("http"): # Garante que o link √© absoluto
                    link = "https://leilo.com.br" + link
                
                imagem_style = safe_get_element_attribute(lote_element_on_page, "div.q-img__image", "style")
                imagem = "N/A"
                if imagem_style != "N/A" and "url(" in imagem_style:
                    match = re.search(r'url\("?\'?([^"\')]+)"?\'?\)', imagem_style)
                    if match:
                        imagem = match.group(1)
                
                uf = safe_get_element_text(lote_element_on_page, "div.codigo-anuncio span")

                ano_raw = safe_get_element_text(lote_element_on_page, "p.text-ano")
                ano = "N/A"
                if ano_raw != "N/A":
                    match_ano = re.search(r'\d{4}', ano_raw)
                    if match_ano:
                        ano = match_ano.group(0)
                    else: # Fallback para anos com 2 d√≠gitos
                        match_ano = re.search(r'\d{2}', ano_raw)
                        if match_ano:
                            ano = "20" + match_ano.group(0)
                        
                km = safe_get_element_text(lote_element_on_page, "p.text-km")
                valor = safe_get_element_text(lote_element_on_page, "li.valor-atual")
                
                situacao = "N/A"
                tempo_restante_span = safe_get_element_text(lote_element_on_page, "a.tempo-restante div > div span.text-weight-medium")
                if tempo_restante_span != "N/A" and tempo_restante_span.strip() != "":
                    situacao = "Leil√£o ao vivo em: " + tempo_restante_span
                else:
                    tag_finalizado = safe_get_element_text(lote_element_on_page, "div.tag-finalizado")
                    if tag_finalizado != "N/A" and tag_finalizado.strip() != "":
                        situacao = tag_finalizado
                    else:
                        data_e_hora_leilao_raw = safe_get_element_text(lote_element_on_page, "p.q-mb-none.text-grey-7")
                        if data_e_hora_leilao_raw != "N/A":
                            situacao = "Leil√£o: " + data_e_hora_leilao_raw.replace('\n', ' ').strip()
                
                data_leilao_str = "N/A"
                full_date_text = safe_get_element_text(lote_element_on_page, "p.q-mb-none.text-grey-7")
                if full_date_text != "N/A":
                    match_date = re.search(r'(\d{2}/\d{2}/\d{4})', full_date_text)
                    if match_date:
                        data_leilao_str = match_date.group(1)

                dados.append({
                    "T√≠tulo": titulo, "Link": link, "Imagem": imagem, "UF": uf, "Ano": ano,
                    "KM": km, "Valor do Lance": valor, "Situa√ß√£o": situacao, "Data Leil√£o": data_leilao_str
                })
            except StaleElementReferenceException:
                print(f"[WARN] StaleElementReferenceException no Lote {i} da P√°gina {current_page}. Este lote pode ser pulado para evitar lentid√£o.")
                # Em vez de tentar re-localizar, podemos optar por pular o lote se a performance for cr√≠tica.
                # Ou re-tentar apenas este lote, se for essencial.
            except Exception as e:
                print(f"[ERRO] Erro inesperado ao extrair dados do Lote {i} na P√°gina {current_page}: {e}")

        # --- L√≥gica de Pagina√ß√£o ---
        if current_page == 1: # S√≥ obt√©m o total de p√°ginas na primeira vez
            try:
                # Localiza o elemento que cont√©m o n√∫mero total de p√°ginas
                total_pages_element = WebDriverWait(driver, 10).until( # Reduzindo o tempo de espera
                    EC.presence_of_element_located((By.XPATH, "//p[contains(@class, 'text-grey-7') and contains(., 'P√°gina')]/span[2]"))
                )
                total_paginas_str = total_pages_element.text.strip()
                if total_paginas_str.isdigit():
                    total_paginas = int(total_paginas_str)
                    print(f"[INFO] Total de p√°ginas identificado: {total_paginas}")
                else:
                    print(f"[WARN] N√£o foi poss√≠vel extrair o total de p√°ginas num√©rico. Usando 1 como padr√£o. Texto encontrado: '{total_paginas_str}'")
                    total_paginas = 1
            except TimeoutException:
                print("‚ùå ERRO: Elemento 'Total de P√°ginas' n√£o encontrado para determinar o loop. Assumindo 1 p√°gina.")
                total_paginas = 1
            except Exception as e:
                print(f"‚ùå ERRO Inesperado ao obter total de p√°ginas: {e}. Assumindo 1 p√°gina.")
                total_paginas = 1

        # Avan√ßa para a pr√≥xima p√°gina, se n√£o for a √∫ltima
        if current_page < total_paginas:
            try:
                next_page_to_click = current_page + 1
                print(f"[INFO] Tentando clicar no bot√£o da P√°gina {next_page_to_click}...")
                
                # XPath para o bot√£o da pr√≥xima p√°gina (baseado no 'aria-label')
                next_page_button_xpath = f"//div[contains(@class, 'q-pagination__middle')]/button[@aria-label='{next_page_to_click}']"
                
                # Reduzindo o tempo de espera para o bot√£o de pr√≥xima p√°gina
                button = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, next_page_button_xpath))
                )
                
                if 'disabled' not in button.get_attribute('class'):
                    driver.execute_script("arguments[0].click();", button)
                    print(f"‚úÖ SUCESSO: Clicado no bot√£o da P√°gina {next_page_to_click}.")
                    current_page += 1
                    # N√£o h√° time.sleep(2) fixo aqui. A espera √© feita pelo WebDriverWait abaixo.
                    print("[INFO] Aguardando o carregamento dos novos lotes na pr√≥xima p√°gina...")
                    WebDriverWait(driver, 20).until( # Reduzindo o tempo de espera para novos lotes
                        EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".sessao.cursor-pointer"))
                    )
                else:
                    print(f"[WARN] Bot√£o da P√°gina {next_page_to_click} est√° desabilitado. Fim da pagina√ß√£o esperada.")
                    break
            except TimeoutException:
                print(f"‚ùå ERRO: Bot√£o da P√°gina {next_page_to_click} N√ÉO encontrado ou n√£o clic√°vel (Timeout). Fim da pagina√ß√£o.")
                break
            except ElementClickInterceptedException as e:
                print(f"‚ùå ERRO: Clique no bot√£o da P√°gina {next_page_to_click} interceptado: {e}. Fim da pagina√ß√£o.")
                break
            except Exception as e:
                print(f"‚ùå ERRO Inesperado ao clicar no bot√£o da pr√≥xima p√°gina: {e}. Fim da pagina√ß√£o.")
                break
        else:
            print("[INFO] √öltima p√°gina alcan√ßada. Fim da pagina√ß√£o.")
            break

    # --- IN√çCIO DA NOVA FUNCIONALIDADE: BUSCA DE DETALHES P√ìS-PAGINA√á√ÉO ---
    print("\n--- INICIANDO EXTRA√á√ÉO DE DETALHES DE CADA LOTE ---")
    extract_lot_details(driver, dados) # Chama a fun√ß√£o para extrair detalhes

    # --- Salvamento dos Dados em CSV ---
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_filename = f"leilo_com_br_carros_{timestamp}.csv"

    fieldnames = [
        "T√≠tulo", "Link", "Imagem", "UF", "Ano", "KM", "Valor do Lance", "Situa√ß√£o", "Data Leil√£o",
        "Detalhe Ano Ve√≠culo", "Detalhe Combust√≠vel", "Detalhe KM Ve√≠culo", "Detalhe Detalhe Valor Mercado",
        "Detalhe Cor", "Detalhe Possui Chave", "Detalhe Tipo Retomada", "Detalhe Localiza√ß√£o",
        "Detalhe Tipo Ve√≠culo"
    ]

    print(f"\n--- Salvando dados em '{output_filename}' ---")
    try:
        with open(output_filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(dados)
        print(f"‚úÖ SUCESSO: Dados salvos em '{output_filename}'. Total de {len(dados)} registros.")
    except IOError as e:
        print(f"‚ùå ERRO: N√£o foi poss√≠vel escrever no arquivo CSV '{output_filename}': {e}")
    except Exception as e:
        print(f"‚ùå ERRO Inesperado ao salvar o arquivo CSV: {e}")

except Exception as e:
    print(f"‚ùå Ocorreu um erro cr√≠tico durante a execu√ß√£o principal: {e}")
finally:
    if driver:
        print("[INFO] Fechando o navegador...")
        driver.quit()
    print("[INFO] Script finalizado.")