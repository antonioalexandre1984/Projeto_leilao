import csv
import time
import re # Importa o m√≥dulo re para express√µes regulares
import os # Importa o m√≥dulo os para manipula√ß√£o de caminhos
from datetime import datetime # Importa o m√≥dulo datetime para gerar timestamps

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, WebDriverException, TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def safe_get_element_text(element, css_selector):
    """
    Tenta obter o texto de um elemento usando um seletor CSS.
    Retorna "N/A" se o elemento n√£o for encontrado.
    """
    try:
        return element.find_element(By.CSS_SELECTOR, css_selector).text.strip()
    except NoSuchElementException:
        return "N/A"

def safe_get_element_attribute(element, css_selector, attribute):
    """
    Tenta obter um atributo de um elemento usando um seletor CSS.
    Retorna "N/A" se o elemento n√£o for encontrado ou o atributo n√£o existir.
    """
    try:
        return element.find_element(By.CSS_SELECTOR, css_selector).get_attribute(attribute)
    except NoSuchElementException:
        return "N/A"

# Configura op√ß√µes do Chrome
options = Options()
# options.add_argument("--headless")   # Descomente para rodar sem interface gr√°fica (modo headless)
options.add_argument("--disable-gpu")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")

# URL do servidor Selenium remoto no container
SELENIUM_URL = "http://selenium:4444/wd/hub"

# Conecta ao Selenium remoto
driver = None
MAX_TRIES = 10 # N√∫mero m√°ximo de tentativas de conex√£o

for attempt in range(MAX_TRIES):
    try:
        print(f"[INFO] Tentando conectar ao Selenium ({attempt+1}/{MAX_TRIES})...")
        driver = webdriver.Remote(command_executor=SELENIUM_URL, options=options)
        print("[INFO] Conectado ao Selenium!")
        break
    except WebDriverException as e:
        print(f"[WARN] Selenium ainda n√£o est√° pronto: {e}. Tentando novamente em 2 segundos...")
        time.sleep(2)
else:
    raise Exception("‚ùå N√£o foi poss√≠vel conectar ao Selenium ap√≥s v√°rias tentativas.")

dados = [] # Lista para armazenar os dados de todos os lotes

try:
    url = "https://leilo.com.br/leilao/carros?" # URL da p√°gina de leil√µes em Bras√≠lia
    driver.get(url)
    print(f"[INFO] P√°gina carregada: {driver.title}")

    # Espera at√© que os elementos dos lotes (cards) estejam presentes na p√°gina.
    # Usamos o seletor mais espec√≠fico para os cards de lote.
    WebDriverWait(driver, 20).until(
        EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".sessao.cursor-pointer"))
    )

    # Encontra todos os elementos que representam um lote de leil√£o
    lotes = driver.find_elements(By.CSS_SELECTOR, ".sessao.cursor-pointer")
    print(f"[INFO] {len(lotes)} lotes encontrados.")

    for i, lote in enumerate(lotes, start=1):
        print(f"\nüîç Extraindo dados do Lote {i}:")

        # 1. T√≠tulo do Lote
        # Seletor: h3 dentro de div.header-card
        titulo = safe_get_element_text(lote, "div.header-card h3")
        print(f"   - T√≠tulo: {titulo}")

        # 2. Link do Lote
        # Seletor: a.img-card (link principal da imagem)
        link = safe_get_element_attribute(lote, "a.img-card", "href")
        if link == "N/A":
            # Fallback para o link dentro do header-card se o principal n√£o for encontrado
            link = safe_get_element_attribute(lote, "div.header-card a", "href")
        
        # Garante que o link seja absoluto
        if link and not link.startswith("http"):
            link = "https://leilo.com.br" + link
        print(f"   - Link: {link}")

        # 3. Imagem do Lote
        # Seletor: div.q-img__image (onde a URL da imagem est√° no estilo background-image)
        imagem_style = safe_get_element_attribute(lote, "div.q-img__image", "style")
        imagem = "N/A"
        if imagem_style != "N/A" and "url(" in imagem_style:
            # Extrai a URL usando regex
            match = re.search(r'url\("?\'?([^"\')]+)"?\'?\)', imagem_style)
            if match:
                imagem = match.group(1)
        print(f"   - Imagem URL: {imagem}")

        # 4. UF (Estado) do Lote
        # Seletor: span que vem depois do √≠cone de localiza√ß√£o dentro de lote-codigo
        uf = safe_get_element_text(lote, "div.lote-codigo i.location_on + span")
        print(f"   - UF: {uf}")

        # 5. Ano do Lote
        # Seletor: p.text-ano
        ano_raw = safe_get_element_text(lote, "p.text-ano")
        ano = "N/A"
        if ano_raw != "N/A":
            # Limpa o texto "13 /13" para "2013"
            match_ano = re.search(r'\d{2}', ano_raw) # Busca dois d√≠gitos
            if match_ano:
                ano = "20" + match_ano.group(0) # Assume que s√£o anos 20xx
        print(f"   - Ano: {ano}")

        # 6. KM (Quilometragem) do Lote
        # Seletor: p.text-km
        km = safe_get_element_text(lote, "p.text-km")
        print(f"   - KM: {km}")

        # 7. Valor do Lance Atual
        # Seletor: li.valor-atual (o texto do li √© o valor)
        valor = safe_get_element_text(lote, "li.valor-atual")
        print(f"   - Valor do Lance: {valor}")

        # 8. Situa√ß√£o do Lote (Ex: tempo restante, finalizado, retirado)
        situacao = "N/A"
        
        # Tenta obter o tempo restante (Leil√£o ao vivo em...)
        tempo_restante_span = safe_get_element_text(lote, "a.tempo-restante div > div span.text-weight-medium")
        if tempo_restante_span != "N/A" and tempo_restante_span.strip() != "":
            situacao = "Leil√£o ao vivo em: " + tempo_restante_span
        else:
            # Tenta obter "Finalizado" ou "Retirado"
            tag_finalizado = safe_get_element_text(lote, "div.tag-finalizado")
            if tag_finalizado != "N/A" and tag_finalizado.strip() != "":
                situacao = tag_finalizado
            else:
                # Tenta obter a data e hora do leil√£o no rodap√© para 'situa√ß√£o'
                data_e_hora_leilao_raw = safe_get_element_text(lote, "p.q-mb-none.text-grey-7")
                if data_e_hora_leilao_raw != "N/A":
                    situacao = "Leil√£o: " + data_e_hora_leilao_raw.replace('\n', ' ').strip()
        print(f"   - Situa√ß√£o: {situacao}")

        # 9. Data do Leil√£o (NOVA COLUNA)
        data_leilao_str = "N/A"
        # O seletor para a data do leil√£o √© a tag <p> com as classes q-mb-none e text-grey-7
        full_date_text = safe_get_element_text(lote, "p.q-mb-none.text-grey-7")
        if full_date_text != "N/A":
            # Usa regex para extrair a data no formato dd/mm/aaaa
            match_date = re.search(r'(\d{2}/\d{2}/\d{4})', full_date_text)
            if match_date:
                data_leilao_str = match_date.group(1)
        print(f"   - Data Leil√£o: {data_leilao_str}")


        dados.append({
            "T√≠tulo": titulo,
            "Link": link,
            "Imagem": imagem,
            "UF": uf,
            "Ano": ano,
            "KM": km,
            "Valor do Lance": valor,
            "Situa√ß√£o": situacao,
            "Data Leil√£o": data_leilao_str # Adiciona a nova coluna
        })

    # --- Corre√ß√£o e diagn√≥stico para a gera√ß√£o do CSV ---
    if dados: # Verifica se a lista de dados n√£o est√° vazia
        # Gera um timestamp para o nome do arquivo, garantindo unicidade
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        # Define o nome do arquivo CSV com o timestamp
        output_file_name = f"leilo_{timestamp}.csv"
        output_path = os.path.join("etl/", output_file_name) # Caminho completo no container Docker

        try:
            # Salvar os dados em um arquivo CSV
            # O arquivo ser√° salvo no diret√≥rio /app dentro do container Docker
            with open(output_path, "w", newline="", encoding="utf-8-sig") as f:
                writer = csv.DictWriter(f, fieldnames=dados[0].keys())
                writer.writeheader()
                writer.writerows(dados)
            print(f"\n[INFO] Dados salvos com sucesso em {output_path}")
        except IOError as e:
            print(f"\n[ERRO] N√£o foi poss√≠vel salvar o arquivo CSV em {output_path}.")
            print(f"Causa do erro: {e}")
            print("Isso pode ser devido a permiss√µes de escrita ou o caminho do arquivo n√£o ser acess√≠vel.")
        except Exception as e:
            print(f"\n[ERRO] Ocorreu um erro inesperado ao tentar salvar o CSV: {e}")
    else:
        print("\n[WARN] Nenhum lote foi encontrado na p√°gina. O arquivo CSV n√£o ser√° gerado.")
    
    # --- IN√çCIO DA VERIFICA√á√ÉO DE BOT√ïES DE PAGINA√á√ÉO NO RODAP√â ---
    print("\n--- IN√çCIO DA VERIFICA√á√ÉO DE BOT√ïES DE PAGINA√á√ÉO NO RODAP√â ---")

    # Adicionar uma pequena pausa extra aqui para garantir que os elementos num√©ricos carreguem
    time.sleep(2) 

    # 1. Tentar encontrar o elemento que mostra "P√°gina X de Y"
    try:
        total_pages_element = WebDriverWait(driver, 15).until( # Aumentei o tempo de espera
            EC.presence_of_element_located((By.XPATH, "//p[contains(@class, 'text-grey-7') and contains(., 'P√°gina')]/span[2]"))
        )
        print(f"‚úÖ SUCESSO: Elemento 'Total de P√°ginas' encontrado no rodap√©. Texto: {total_pages_element.text.strip()}")
    except TimeoutException:
        print("‚ùå ERRO: Elemento 'Total de P√°ginas' (//p[contains(@class, 'text-grey-7') and contains(., 'P√°gina')]/span[2]) N√ÉO encontrado no rodap√© (Timeout).")
    except NoSuchElementException:
        print("‚ùå ERRO: Elemento 'Total de P√°ginas' (//p[contains(@class, 'text-grey-7') and contains(., 'P√°gina')]/span[2]) N√ÉO encontrado no rodap√© (NoSuchElement).")
    except Exception as e:
        print(f"‚ùå ERRO Inesperado ao buscar 'Total de P√°ginas' no rodap√©: {e}")

    # 2. Tentar encontrar o bot√£o "Pr√≥xima P√°gina" (seta dupla para a direita, ir para a √∫ltima)
    try:
        next_page_button = WebDriverWait(driver, 15).until( # Aumentei o tempo de espera
            EC.element_to_be_clickable((
                By.XPATH,
                "//div[contains(@class, 'pagination-listaveiculos')]//button[.//i[contains(text(), 'keyboard_double_arrow_right')]]"
            ))
        )
        print(f"‚úÖ SUCESSO: Bot√£o 'Pr√≥xima P√°gina' (seta dupla direita) encontrado no rodap√©. Atributo aria-label: {next_page_button.get_attribute('aria-label')}. Habilitado: {'disabled' not in next_page_button.get_attribute('class')}")
    except TimeoutException:
        print("‚ùå ERRO: Bot√£o 'Pr√≥xima P√°gina' (seta dupla direita) N√ÉO encontrado no rodap√© (Timeout).")
    except NoSuchElementException:
        print("‚ùå ERRO: Bot√£o 'Pr√≥xima P√°gina' (seta dupla direita) N√ÉO encontrado no rodap√© (NoSuchElement).")
    except Exception as e:
        print(f"‚ùå ERRO Inesperado ao buscar bot√£o 'Pr√≥xima P√°gina' no rodap√©: {e}")

    # 3. Tentar encontrar os bot√µes num√©ricos de pagina√ß√£o (ex: 1, 2, 3...)
    try:
        # Novo seletor XPath mais direto para os bot√µes num√©ricos
        # Tenta encontrar qualquer bot√£o dentro do q-pagination__middle que contenha um span com a classe 'block'
        page_number_buttons = WebDriverWait(driver, 15).until( # Aumentei o tempo de espera
            EC.presence_of_all_elements_located((By.XPATH, "//div[contains(@class, 'q-pagination__middle')]/button[.//span[@class='block']]"))
            # Alternativa se o acima falhar: By.CSS_SELECTOR, "div.q-pagination__middle button.q-btn--round span.block"
        )
        if page_number_buttons:
            print(f"‚úÖ SUCESSO: {len(page_number_buttons)} Bot√µes de P√°gina Num√©ricos encontrados no rodap√©.")
            for btn in page_number_buttons:
                print(f"   - Bot√£o num√©rico encontrado: {btn.text.strip()} (aria-label: {btn.get_attribute('aria-label')})")
        else:
            print("‚ùå ERRO: Nenhum Bot√£o de P√°gina Num√©rico encontrado no rodap√© (Lista Vazia).")
    except TimeoutException:
        print("‚ùå ERRO: Bot√µes de P√°gina Num√©ricos N√ÉO encontrados no rodap√© (Timeout).")
    except NoSuchElementException:
        print("‚ùå ERRO: Bot√µes de P√°gina Num√©ricos N√ÉO encontrados no rodap√© (NoSuchElement).")
    except Exception as e:
        print(f"‚ùå ERRO Inesperado ao buscar bot√µes num√©ricos no rodap√©: {e}")

    print("\n--- FIM DA VERIFICA√á√ÉO DE BOT√ïES DE PAGINA√á√ÉO NO RODAP√â ---")

finally:
    if driver: # Garante que o driver seja fechado mesmo se ocorrer um erro
        driver.quit()
    print("[INFO] Navegador fechado.")
    print("[INFO] Scraping e verifica√ß√£o de pagina√ß√£o conclu√≠dos.")