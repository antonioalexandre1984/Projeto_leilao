import csv
import time
import re
import os
from datetime import datetime

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, WebDriverException, TimeoutException, StaleElementReferenceException, ElementClickInterceptedException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def safe_get_element_text(element, css_selector):
    """
    Tenta obter o texto de um elemento usando um seletor CSS.
    Retorna "N/A" se o elemento n√£o for encontrado ou o texto for vazio.
    """
    try:
        found_element = element.find_element(By.CSS_SELECTOR, css_selector)
        text = found_element.text.strip()
        # Replace non-breaking space with regular space and ensure it's not just whitespace
        cleaned_text = text.replace('\xa0', ' ').strip()
        return cleaned_text if cleaned_text else "N/A"
    except NoSuchElementException:
        return "N/A"
    except StaleElementReferenceException:
        # If the element becomes stale here, try to re-find it or just return N/A
        try:
            # Attempt to re-find the element if it became stale
            re_found_element = WebDriverWait(element, 1).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, css_selector))
            )
            text = re_found_element.text.strip()
            cleaned_text = text.replace('\xa0', ' ').strip()
            return cleaned_text if cleaned_text else "N/A"
        except (NoSuchElementException, TimeoutException, StaleElementReferenceException):
            return "N/A"
        except Exception as e:
            print(f"DEBUG: Erro ao re-encontrar elemento em safe_get_element_text para seletor '{css_selector}': {e}")
            return "N/A"
    except Exception as e:
        # Catch any other unexpected error during text retrieval
        print(f"DEBUG: Erro em safe_get_element_text para seletor '{css_selector}': {e}")
        return "N/A"

def safe_get_element_attribute(element, css_selector, attribute):
    """
    Tenta obter um atributo de um elemento usando um seletor CSS.
    Retorna "N/A" se o elemento n√£o for encontrado ou o atributo n√£o existir.
    """
    try:
        found_element = element.find_element(By.CSS_SELECTOR, css_selector)
        attr_value = found_element.get_attribute(attribute)
        return attr_value.strip() if attr_value else "N/A"
    except NoSuchElementException:
        return "N/A"
    except StaleElementReferenceException:
        # If the element becomes stale here, try to re-find it or just return N/A
        try:
            re_found_element = WebDriverWait(element, 1).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, css_selector))
            )
            attr_value = re_found_element.get_attribute(attribute)
            return attr_value.strip() if attr_value else "N/A"
        except (NoSuchElementException, TimeoutException, StaleElementReferenceException):
            return "N/A"
        except Exception as e:
            print(f"DEBUG: Erro ao re-encontrar elemento em safe_get_element_attribute para seletor '{css_selector}' e atributo '{attribute}': {e}")
            return "N/A"
    except Exception as e:
        # Catch any other unexpected error during attribute retrieval
        print(f"DEBUG: Erro em safe_get_element_attribute para seletor '{css_selector}' e atributo '{attribute}': {e}")
        return "N/A"

# Configura op√ß√µes do Chrome
options = Options()
# options.add_argument("--headless")   # Descomente para rodar sem interface gr√°fica (modo headless)
options.add_argument("--disable-gpu")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
# Adicionando op√ß√µes para simular melhor um navegador real e evitar detec√ß√µes
options.add_argument("--window-size=1920,1080")
options.add_argument("--start-maximized")
options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option("useAutomationExtension", False)

# URL do servidor Selenium remoto no container
SELENIUM_URL = "http://selenium:4444/wd/hub"

# Conecta ao Selenium remoto
driver = None
MAX_TRIES = 10 # N√∫mero m√°ximo de tentativas de conex√£o

for attempt in range(MAX_TRIES):
    try:
        print(f"[INFO] Tentando conectar ao Selenium ({attempt+1}/{MAX_TRIES})...")
        driver = webdriver.Remote(command_executor=SELENIUM_URL, options=options)
        print("[INFO] Conectado ao Selenium!")
        break
    except WebDriverException as e:
        print(f"[WARN] Selenium ainda n√£o est√° pronto: {e}. Tentando novamente em 2 segundos...")
        time.sleep(2)
else:
    raise Exception("‚ùå N√£o foi poss√≠vel conectar ao Selenium ap√≥s v√°rias tentativas.")

dados = [] # Lista para armazenar os dados de todos os lotes

try:
    url = "https://leilo.com.br/leilao/carros?" # URL da p√°gina de leil√µes
    driver.get(url)
    print(f"[INFO] P√°gina carregada: {driver.title}")

    # --- L√≥gica para fechar pop-up de cookies ou outros banners (CR√çTICO) ---
    print("[INFO] Tentando fechar pop-ups/aceitar cookies (se houver)...")
    try:
        # Aguarda o banner principal
        cookie_banner_container = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div.cc-nb-main-container"))
        )
        # Tenta encontrar e clicar no bot√£o de aceitar cookies
        cookie_accept_button = WebDriverWait(cookie_banner_container, 3).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button.cc-nb-okcookie"))
        )
        
        driver.execute_script("arguments[0].click();", cookie_accept_button)
        print("[INFO] Pop-up de cookies/aceita√ß√£o clicado com sucesso.")
        time.sleep(2) # Pausa para o pop-up desaparecer
    except TimeoutException:
        print("[INFO] Nenhum pop-up de cookies/aceita√ß√£o identificado ou apareceu no tempo limite. Prosseguindo.")
    except NoSuchElementException:
        print("[INFO] Cont√™iner de cookies encontrado, mas o bot√£o de aceitar n√£o. Prosseguindo.")
    except Exception as e:
        print(f"[WARN] Erro inesperado ao tentar lidar com pop-ups: {e}. Prosseguindo.")
    # --- FIM da l√≥gica de pop-up ---

    # Vari√°veis de controle de pagina√ß√£o
    total_paginas = 1
    current_page = 1

    # Loop principal para iterar por todas as p√°ginas
    while current_page <= total_paginas:
        print(f"\n--- Processando P√°gina {current_page} de {total_paginas} ---")

        # Espera at√© que os elementos dos lotes (cards) estejam presentes na p√°gina.
        try:
            WebDriverWait(driver, 30).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".sessao.cursor-pointer"))
            )
            time.sleep(2) 
        except TimeoutException:
            print(f"[WARN] Timeout ao carregar lotes na P√°gina {current_page}. Pode n√£o haver lotes nesta p√°gina ou carregamento lento. Fim da extra√ß√£o.")
            break 

        lotes = driver.find_elements(By.CSS_SELECTOR, ".sessao.cursor-pointer")
        print(f"[INFO] {len(lotes)} lotes encontrados na P√°gina {current_page}.")

        if not lotes: 
            print(f"[INFO] Nenhum lote encontrado na P√°gina {current_page}. Fim da extra√ß√£o.")
            break

        # Extra√ß√£o de dados dos lotes da p√°gina atual
        for i, lote in enumerate(lotes, start=1):
            try:
                # Re-locate the lot element to avoid StaleElementReferenceException for the lot cards
                # This is important if the page reloads or elements shift during pagination
                lote_element_on_page = WebDriverWait(driver, 10).until(EC.visibility_of(lotes[i-1]))
                
                print(f"üîç Extraindo dados b√°sicos do Lote {i} na P√°gina {current_page}:")

                titulo = safe_get_element_text(lote_element_on_page, "div.header-card h3")
                link = safe_get_element_attribute(lote_element_on_page, "a.img-card", "href")
                if link == "N/A":
                    link = safe_get_element_attribute(lote_element_on_page, "div.header-card a", "href")
                if link and not link.startswith("http"):
                    link = "https://leilo.com.br" + link
                imagem_style = safe_get_element_attribute(lote_element_on_page, "div.q-img__image", "style")
                imagem = "N/A"
                if imagem_style != "N/A" and "url(" in imagem_style:
                    match = re.search(r'url\("?\'?([^"\')]+)"?\'?\)', imagem_style)
                    if match:
                        imagem = match.group(1)
                
                # Extra√ß√£o da UF
                uf = safe_get_element_text(lote_element_on_page, "div.codigo-anuncio span")
                # print(f" ¬† - UF: {uf}") # Comentado para reduzir logs detalhados aqui

                ano_raw = safe_get_element_text(lote_element_on_page, "p.text-ano")
                ano = "N/A"
                if ano_raw != "N/A":
                    # Tenta extrair 4 d√≠gitos para o ano (ex: 2010)
                    match_ano = re.search(r'\d{4}', ano_raw)
                    if match_ano:
                        ano = match_ano.group(0)
                    else: # Se n√£o encontrar 4 d√≠gitos, tenta 2 (ex: '10' para 2010)
                         match_ano = re.search(r'\d{2}', ano_raw)
                         if match_ano:
                             ano = "20" + match_ano.group(0)
                
                km = safe_get_element_text(lote_element_on_page, "p.text-km")
                valor = safe_get_element_text(lote_element_on_page, "li.valor-atual")
                situacao = "N/A"
                tempo_restante_span = safe_get_element_text(lote_element_on_page, "a.tempo-restante div > div span.text-weight-medium")
                if tempo_restante_span != "N/A" and tempo_restante_span.strip() != "":
                    situacao = "Leil√£o ao vivo em: " + tempo_restante_span
                else:
                    tag_finalizado = safe_get_element_text(lote_element_on_page, "div.tag-finalizado")
                    if tag_finalizado != "N/A" and tag_finalizado.strip() != "":
                        situacao = tag_finalizado
                    else:
                        data_e_hora_leilao_raw = safe_get_element_text(lote_element_on_page, "p.q-mb-none.text-grey-7")
                        if data_e_hora_leilao_raw != "N/A":
                            situacao = "Leil√£o: " + data_e_hora_leilao_raw.replace('\n', ' ').strip()
                data_leilao_str = "N/A"
                full_date_text = safe_get_element_text(lote_element_on_page, "p.q-mb-none.text-grey-7")
                if full_date_text != "N/A":
                    match_date = re.search(r'(\d{2}/\d{2}/\d{4})', full_date_text)
                    if match_date:
                        data_leilao_str = match_date.group(1)

                dados.append({
                    "T√≠tulo": titulo, "Link": link, "Imagem": imagem, "UF": uf, "Ano": ano,
                    "KM": km, "Valor do Lance": valor, "Situa√ß√£o": situacao, "Data Leilao": data_leilao_str
                })
            except StaleElementReferenceException:
                print(f"[WARN] StaleElementReferenceException no Lote {i} da P√°gina {current_page}. Re-localizando lotes e tentando novamente esta p√°gina.")
                # If a stale element is encountered, break this inner loop and re-fetch 'lotes' in the next outer loop iteration
                # This ensures we are always working with fresh elements
                break 
            except Exception as e:
                print(f"[ERRO] Erro inesperado ao extrair dados do Lote {i} na P√°gina {current_page}: {e}")

        # L√≥gica de Pagina√ß√£o: Obter o total de p√°ginas e navegar
        if current_page == 1: 
            try:
                total_pages_element = WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.XPATH, "//p[contains(@class, 'text-grey-7') and contains(., 'P√°gina')]/span[2]"))
                )
                total_paginas_str = total_pages_element.text.strip()
                if total_paginas_str.isdigit():
                    total_paginas = int(total_paginas_str)
                    print(f"[INFO] Total de p√°ginas identificado: {total_paginas}")
                else:
                    print(f"[WARN] N√£o foi poss√≠vel extrair o total de p√°ginas num√©rico. Usando 1 como padr√£o. Texto encontrado: '{total_paginas_str}'")
                    total_paginas = 1 
            except TimeoutException:
                print("‚ùå ERRO: Elemento 'Total de P√°ginas' n√£o encontrado para determinar o loop. Assumindo 1 p√°gina.")
                total_paginas = 1
            except Exception as e:
                print(f"‚ùå ERRO Inesperado ao obter total de p√°ginas: {e}. Assumindo 1 p√°gina.")
                total_paginas = 1

        # Avan√ßar para a pr√≥xima p√°gina, se n√£o for a √∫ltima
        if current_page < total_paginas:
            try:
                next_page_to_click = current_page + 1
                print(f"[INFO] Tentando clicar no bot√£o da P√°gina {next_page_to_click}...")
                
                next_page_button_xpath = f"//div[contains(@class, 'q-pagination__middle')]/button[@aria-label='{next_page_to_click}']"
                
                button = WebDriverWait(driver, 15).until(
                    EC.element_to_be_clickable((By.XPATH, next_page_button_xpath))
                )
                
                if 'disabled' not in button.get_attribute('class'):
                    driver.execute_script("arguments[0].click();", button)
                    print(f"‚úÖ SUCESSO: Clicado no bot√£o da P√°gina {next_page_to_click}.")
                    current_page += 1
                    print("[INFO] Aguardando o carregamento dos novos lotes na pr√≥xima p√°gina...")
                    WebDriverWait(driver, 30).until(
                        EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".sessao.cursor-pointer"))
                    )
                    time.sleep(2) 
                else:
                    print(f"[WARN] Bot√£o da P√°gina {next_page_to_click} est√° desabilitado. Fim da pagina√ß√£o esperada.")
                    break 
            except TimeoutException:
                print(f"‚ùå ERRO: Bot√£o da P√°gina {next_page_to_click} N√ÉO encontrado ou n√£o clic√°vel (Timeout). Fim da pagina√ß√£o.")
                break 
            except ElementClickInterceptedException as e:
                print(f"‚ùå ERRO: Clique no bot√£o da P√°gina {next_page_to_click} interceptado: {e}. Fim da pagina√ß√£o.")
                break 
            except Exception as e:
                print(f"‚ùå ERRO Inesperado ao clicar no bot√£o da pr√≥xima p√°gina: {e}. Fim da pagina√ß√£o.")
                break
        else:
            print("[INFO] √öltima p√°gina alcan√ßada. Fim da pagina√ß√£o.")
            break 

    # --- IN√çCIO DA NOVA FUNCIONALIDADE: BUSCA DE DETALHES P√ìS-PAGINA√á√ÉO ---
    print("\n--- INICIANDO EXTRA√á√ÉO DE DETALHES DE CADA LOTE ---")

    def extract_lot_details(driver_instance, lot_data_list):
        """
        Navega para o link de cada lote e extrai informa√ß√µes detalhadas.
        Atualiza a lista lot_data_list com os novos dados.
        """
        main_window_handle = driver_instance.current_window_handle
        
        # Cria uma c√≥pia da lista de dados para iterar, pois vamos modific√°-la
        links_to_visit = [(index, item['Link']) for index, item in enumerate(lot_data_list)]

        for index, link in links_to_visit:
            if link != "N/A" and link:
                print(f"\nüîÑ Processando detalhes para o lote {index + 1} (Link: {link})...")
                
                # Inicializa as vari√°veis de detalhe para cada lote para garantir que existam
                detalhe_4ano_veiculo = "N/A"
                detalhe_combustivel = "N/A"
                detalhe_km_veiculo = "N/A"
                detalhe_valor_mercado = "N/A"
                detalhe_cor = "N/A"
                detalhe_possui_chave = "N/A"
                detalhe_tipo_retomada = "N/A"
                detalhe_localizacao = "N/A"
                detalhe_tipo_veiculo = "N/A"

                try:
                    # Open the link in a new tab
                    driver_instance.execute_script("window.open(arguments[0]);", link)
                    # Wait until a new tab is opened (2 tabs in total)
                    WebDriverWait(driver_instance, 10).until(EC.number_of_windows_to_be(2))
                    driver_instance.switch_to.window(driver_instance.window_handles[-1]) # Switch to the new tab
                    
                    # Espera por um elemento espec√≠fico da p√°gina de detalhes para garantir que carregou
                    # e faz um scroll para que o Selenium foque na √°rea de dados.
                    detail_container = WebDriverWait(driver_instance, 20).until( # Increased timeout
                        EC.presence_of_element_located((By.CSS_SELECTOR, "div.categorias-veiculo"))
                    )
                    driver_instance.execute_script("arguments[0].scrollIntoView(true);", detail_container)
                    time.sleep(3) # Aumentei a pausa ap√≥s o scroll para garantir o carregamento din√¢mico

                    # Function to get detail by label using XPath for GT-SM structure
                    def get_detail_gt_sm_by_label(driver_obj, label_text):
                        try:
                            # The value is inside a <span> within an <a>, which is a sibling of a <div>
                            # containing the label <span>.
                            xpath = f"//div[contains(@class, 'gt-sm')]//span[contains(@class, 'label-categoria') and text()='{label_text}']/ancestor::div[contains(@class, 'col-md-4') or contains(@class, 'col-sm-6')]/a/span"
                            element = driver_obj.find_element(By.XPATH, xpath)
                            text = element.text.strip().replace('\xa0', ' ')
                            return text if text else "N/A"
                        except NoSuchElementException:
                            return "N/A"
                        except StaleElementReferenceException:
                            print(f" ¬† ‚ùó StaleElementReferenceException ao buscar detalhe '{label_text}' em gt-sm. Ignorando.")
                            return "N/A"
                        except Exception as e:
                            print(f" ¬† ‚ùó Erro inesperado ao buscar detalhe '{label_text}' em gt-sm: {e}")
                            return "N/A"

                    # Function to get detail by direct CSS selector for LT-MD structure
                    def get_detail_lt_md_direct(driver_obj, css_selector):
                        try:
                            element = driver_obj.find_element(By.CSS_SELECTOR, css_selector)
                            text = element.text.strip().replace('\xa0', ' ')
                            return text if text else "N/A"
                        except NoSuchElementException:
                            return "N/A"
                        except StaleElementReferenceException:
                            # Try to re-find if stale
                            try:
                                re_found_element = WebDriverWait(driver_obj, 1).until(
                                    EC.presence_of_element_located((By.CSS_SELECTOR, css_selector))
                                )
                                text = re_found_element.text.strip().replace('\xa0', ' ')
                                return text if text else "N/A"
                            except (NoSuchElementException, TimeoutException, StaleElementReferenceException):
                                return "N/A"
                            except Exception as e:
                                print(f"DEBUG: Erro ao re-encontrar elemento direto lt-md: {e}")
                                return "N/A"
                        except Exception as e:
                            print(f"DEBUG: Erro ao buscar detalhe direto lt-md: {e}")
                            return "N/A"

                    # --- Tentativa de extra√ß√£o para gt-sm (priorit√°rio) ---
                    print(" ¬† -> Tentando extrair detalhes do bloco gt-sm (layout desktop)...")
                    
                    detalhe_ano_veiculo = get_detail_gt_sm_by_label(driver_instance, "Ano")
                    # Special parsing for Year if it's "YYYY/YYYY"
                    if detalhe_ano_veiculo != "N/A" and "/" in detalhe_ano_veiculo:
                        detalhe_ano_veiculo = detalhe_ano_veiculo.split('/')[0].strip()

                    detalhe_combustivel = get_detail_gt_sm_by_label(driver_instance, "Combustivel")
                    detalhe_km_veiculo = get_detail_gt_sm_by_label(driver_instance, "Km")
                    detalhe_valor_mercado = get_detail_gt_sm_by_label(driver_instance, "Valor Mercado")
                    if detalhe_valor_mercado != "N/A":
                        detalhe_valor_mercado = detalhe_valor_mercado.replace('R$', '').strip()
                        
                    detalhe_cor = get_detail_gt_sm_by_label(driver_instance, "Cor")
                    detalhe_possui_chave = get_detail_gt_sm_by_label(driver_instance, "Possui Chave")
                    detalhe_tipo_retomada = get_detail_gt_sm_by_label(driver_instance, "Tipo Retomada")
                    detalhe_localizacao = get_detail_gt_sm_by_label(driver_instance, "Localiza√ß√£o")
                    detalhe_tipo_veiculo = get_detail_gt_sm_by_label(driver_instance, "Tipo")

                    # --- Fallback para lt-md se gt-sm falhou para os campos principais ---
                    # Check if ANY of the primary fields from GT-SM are still N/A
                    if (detalhe_ano_veiculo == "N/A" or detalhe_combustivel == "N/A" or detalhe_km_veiculo == "N/A" or
                        detalhe_valor_mercado == "N/A" or detalhe_cor == "N/A" or detalhe_possui_chave == "N/A"):

                        print(" ¬† -> GT-SM n√£o forneceu todos os detalhes. Tentando extrair detalhes do bloco lt-md (layout mobile)...")
                        
                        # LT-MD has a different structure for Year, Fuel, KM (direct p.text-categoria)
                        temp_ano = get_detail_lt_md_direct(driver_instance, "div.lt-md div.row.q-col-gutter-sm.text-center.q-pb-sm div.col-4:nth-child(1) p.text-categoria")
                        if temp_ano != "N/A":
                            # Use the first part if it's "YYYY/YYYY" or just the year
                            if "/" in temp_ano:
                                detalhe_ano_veiculo = temp_ano.split('/')[0].strip()
                            else:
                                detalhe_ano_veiculo = temp_ano.strip()

                        temp_combustivel = get_detail_lt_md_direct(driver_instance, "div.lt-md div.row.q-col-gutter-sm.text-center.q-pb-sm div.col-4:nth-child(2) p.text-categoria")
                        if temp_combustivel != "N/A":
                            detalhe_combustivel = temp_combustivel
                        
                        temp_km = get_detail_lt_md_direct(driver_instance, "div.lt-md div.row.q-col-gutter-sm.text-center.q-pb-sm div.col-4:nth-child(3) p.text-categoria")
                        if temp_km != "N/A":
                            detalhe_km_veiculo = temp_km

                        # For other fields, LT-MD might use the `label-categoria` span + p.text-categoria pattern
                        if detalhe_valor_mercado == "N/A":
                            temp_valor_mercado = get_detail_lt_md_direct(driver_instance, "div.lt-md div.row.q-col-gutter-sm.text-center div.col-4:nth-child(1) p.text-categoria")
                            if temp_valor_mercado != "N/A":
                                detalhe_valor_mercado = temp_valor_mercado.replace('R$', '').strip()

                        if detalhe_cor == "N/A":
                            temp_cor = get_detail_lt_md_direct(driver_instance, "div.lt-md div.row.q-col-gutter-sm.text-center div.col-4:nth-child(2) p.text-categoria")
                            if temp_cor != "N/A":
                                detalhe_cor = temp_cor

                        if detalhe_possui_chave == "N/A":
                            temp_chave = get_detail_lt_md_direct(driver_instance, "div.lt-md div.row.q-col-gutter-sm.text-center div.col-4:nth-child(3) p.text-categoria")
                            if temp_chave != "N/A":
                                detalhe_possui_chave = temp_chave

                        # For Tipo Retomada, Localiza√ß√£o, Tipo Ve√≠culo, LT-MD has a different structure:
                        # <div> with label-categoria then <a>/<span>
                        if detalhe_tipo_retomada == "N/A":
                            detalhe_tipo_retomada = get_detail_lt_md_direct(driver_instance, "div.lt-md div.row.q-col-gutter-md div.col-md-4:nth-child(1) a.text-categoria > span")
                        if detalhe_localizacao == "N/A":
                            # Location in LT-MD has a <p> inside the <span>, need to handle that
                            temp_location_ltmd = get_detail_lt_md_direct(driver_instance, "div.lt-md div.row.q-col-gutter-md div.col-md-4:nth-child(2) a.text-categoria > span > p")
                            if temp_location_ltmd != "N/A":
                                detalhe_localizacao = temp_location_ltmd
                            else: # Fallback if there's no <p> inside <span>
                                detalhe_localizacao = get_detail_lt_md_direct(driver_instance, "div.lt-md div.row.q-col-gutter-md div.col-md-4:nth-child(2) a.text-categoria > span")
                        if detalhe_tipo_veiculo == "N/A":
                            detalhe_tipo_veiculo = get_detail_lt_md_direct(driver_instance, "div.lt-md div.row.q-col-gutter-md div.col-md-4:nth-child(3) a.text-categoria > span")


                    print(f" ¬† ‚úîÔ∏è Detalhes extra√≠dos para {link}.")
                    print(f" ¬† -> Ano: {detalhe_ano_veiculo}")
                    print(f" ¬† -> Combust√≠vel: {detalhe_combustivel}")
                    print(f" ¬† -> KM: {detalhe_km_veiculo}")
                    print(f" ¬† -> Valor Mercado: {detalhe_valor_mercado}")
                    print(f" ¬† -> Cor: {detalhe_cor}")
                    print(f" ¬† -> Possui Chave: {detalhe_possui_chave}")
                    print(f" ¬† -> Tipo Retomada: {detalhe_tipo_retomada}")
                    print(f" ¬† -> Localiza√ß√£o: {detalhe_localizacao}")
                    print(f" ¬† -> Tipo Ve√≠culo: {detalhe_tipo_veiculo}")

                except TimeoutException:
                    print(f" ¬† ‚ö†Ô∏è Timeout ao carregar detalhes do lote em {link}. Informa√ß√µes adicionais podem estar incompletas ou a p√°gina n√£o carregou corretamente.")
                except Exception as e:
                    print(f" ¬† ‚ùå ERRO geral ao extrair detalhes da p√°gina {link}: {e}")
                
                finally:
                    # Fecha a aba do lote e volta para a aba principal
                    driver_instance.close()
                    driver_instance.switch_to.window(main_window_handle)
                    print(f" ¬† ‚¨ÖÔ∏è Voltando para a p√°gina principal.")
            else:
                print(f" ¬† ‚ùó Link n√£o dispon√≠vel para o lote {index + 1}. Pulando extra√ß√£o de detalhes.")
            
            # Atualiza o dicion√°rio correspondente na lista `dados`
            # √â importante garantir que o √≠ndice seja v√°lido e que o dicion√°rio j√° exista
            if index < len(lot_data_list):
                lot_data_list[index].update({
                    "Detalhe_Ano_Veiculo": detalhe_ano_veiculo,
                    "Detalhe_Combustivel": detalhe_combustivel,
                    "Detalhe_KM_Veiculo": detalhe_km_veiculo,
                    "Detalhe_Valor_Mercado": detalhe_valor_mercado,
                    "Detalhe_Cor": detalhe_cor,
                    "Detalhe_Possui_Chave": detalhe_possui_chave,
                    "Detalhe_Tipo_Retomada": detalhe_tipo_retomada,
                    "Detalhe_Localizacao": detalhe_localizacao,
                    "Detalhe_Tipo_Veiculo": detalhe_tipo_veiculo
                })
            else:
                print(f"[ERROR] √çndice {index} fora dos limites para atualizar dados.")


    # Chama a fun√ß√£o para extrair os detalhes de cada lote AP√ìS a pagina√ß√£o completa
    extract_lot_details(driver, dados)

    print("\n--- EXTRA√á√ÉO DE DETALHES CONCLU√çDA ---")
    # --- FIM DA NOVA FUNCIONALIDADE ---

    # --- Gera√ß√£o do CSV ---
    if dados: # Verifica se a lista de dados n√£o est√° vazia
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file_name = f"leilo_{timestamp}.csv"
        output_path = os.path.join("etl/", output_file_name) 

        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        try:
            with open(output_path, "w", newline="", encoding="utf-8-sig") as f:
                if dados:
                    # Garante que todos os dicion√°rios tenham as mesmas chaves para o cabe√ßalho
                    # Pega todas as chaves de todos os dicion√°rios e remove duplicatas
                    all_keys = list(set(key for d in dados for key in d.keys()))
                    writer = csv.DictWriter(f, fieldnames=all_keys)
                    writer.writeheader()
                    writer.writerows(dados)
            print(f"\n[INFO] Dados salvos com sucesso em {output_path}")
        except IOError as e:
            print(f"\n[ERRO] N√£o foi poss√≠vel salvar o arquivo CSV em {output_path}.")
            print(f"Causa do erro: {e}")
            print("Isso pode ser devido a permiss√µes de escrita ou o caminho do arquivo n√£o ser acess√≠vel.")
        except Exception as e:
            print(f"\n[ERRO] Ocorreu um erro inesperado ao tentar salvar o CSV: {e}")
    else:
        print("\n[WARN] Nenhum lote foi encontrado em todas as p√°ginas. O arquivo CSV n√£o ser√° gerado.")
    
finally:
    if driver: # Garante que o driver seja fechado mesmo se ocorrer um erro
        driver.quit()
    print("[INFO] Navegador fechado.")
    print("[INFO] Scraping e pagina√ß√£o conclu√≠dos.")